initSidebarItems({"enum":[["ErrorKind","The kind of an error."],["WinitInputError","Errors that may happen when driving the event loop of `WinitInputBackend`"]],"fn":[["init","Create a new `WinitGraphicsBackend`, which implements the `EGLGraphicsBackend` graphics backend trait and a corresponding `WinitInputBackend`, which implements the `InputBackend` trait"],["init_from_builder","Create a new `WinitGraphicsBackend`, which implements the `EGLGraphicsBackend` graphics backend trait, from a given `WindowBuilder` struct and a corresponding `WinitInputBackend`, which implements the `InputBackend` trait"],["init_from_builder_with_gl_attr","Create a new `WinitGraphicsBackend`, which implements the `EGLGraphicsBackend` graphics backend trait, from a given `WindowBuilder` struct, as well as given `GlAttributes` for further customization of the rendering pipeline and a corresponding `WinitInputBackend`, which implements the `InputBackend` trait."]],"struct":[["Error","The Error type."],["WinitGraphicsBackend","Window with an active EGL Context created by `winit`. Implements the `EGLGraphicsBackend` graphics backend trait"],["WinitInputBackend","Abstracted event loop of a `winit` `Window` implementing the `InputBackend` trait"],["WinitKeyboardInputEvent","Winit-Backend internal event wrapping winit's types into a `KeyboardKeyEvent`"],["WinitMouseInputEvent","Winit-Backend internal event wrapping winit's types into a `PointerButtonEvent`"],["WinitMouseMovedEvent","Winit-Backend internal event wrapping winit's types into a `PointerMotionAbsoluteEvent`"],["WinitMouseWheelEvent","Winit-Backend internal event wrapping winit's types into a `PointerAxisEvent`"],["WinitTouchCancelledEvent","Winit-Backend internal event wrapping winit's types into a `TouchCancelEvent`"],["WinitTouchEndedEvent","Winit-Backend internal event wrapping winit's types into a `TouchUpEvent`"],["WinitTouchMovedEvent","Winit-Backend internal event wrapping winit's types into a `TouchMotionEvent`"],["WinitTouchStartedEvent","Winit-Backend internal event wrapping winit's types into a `TouchDownEvent`"]],"trait":[["ResultExt","Additional methods for `Result`, for easy interaction with this crate."],["WinitEventsHandler","Handler trait to recieve window-related events to provide a better nested experience."]],"type":[["Result","Convenient wrapper around `std::Result`."]]});